{"version":3,"sources":["webpack://@josokinas/react-flow-playground/./src/pages/index.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/task.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_1.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/interactive_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/sync_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/async_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/condition.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_2.jsx"],"names":["tests","test1","Test1","test2","Test2","TestComponent","useState","test","setTest","className","onClick","style","out_1","out_2","memo","data","title","id","type","position","isConnectable","backgroundColor","nodeTypes","start","Start","task","Task","finish","Finish","nodeStyles","startStyle","taskStyle","initialElements","x","y","elements","setElements","onConnect","params","elementType","source","find","element","color","sourceHandle","addEdge","stroke","map","target","in","rules","rule","key","interactive_task","InteractiveTask","sync_task","SyncTask","async_task","AsyncTask","condition","Condition","getElementNodeType","getElementTitle","workflowData","defaultNode","nextNode","visualSettings","length","push","taskDefinition","tasksData","name","settings","getElementObj","forEach","height","JSON","stringify"],"mappings":"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","file":"component---src-pages-index-jsx-2ebd33a4739d42d04cb1.js","sourcesContent":["import React, { useState } from 'react';\n\nimport Test1 from './test_1';\nimport Test2 from './test_2';\n\nconst tests = {\n  test1: Test1,\n  test2: Test2,\n};\n\nfunction Index() {\n  const [test, setTest] = useState(null);\n\n  const getTest = () => {\n    const TestComponent = tests[test];\n\n    if (TestComponent) return <TestComponent />;\n\n    return null;\n  };\n\n  return (\n    <div className=\"container\">\n      <button onClick={() => setTest('test1')}>Test 1</button>\n      <button onClick={() => setTest('test2')}>Test 2</button>\n      {getTest()}\n    </div>\n  );\n}\n\nexport default Index;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nexport const style = {\n  out_1: 'rgba(222, 180, 31)',\n  out_2: 'rgba(15, 34, 212)',\n};\n\nconst Task = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 1\n            <Handle\n              id=\"out_1\"\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_1 }}\n            />\n          </div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 2\n            <Handle\n              id=\"out_2\"\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_2 }}\n            />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Task;\n","import React, { useState } from 'react';\nimport ReactFlow, { addEdge } from 'react-flow-renderer';\n\nimport Start, { style as startStyle } from '../components/nodes/start';\nimport Task, { style as taskStyle } from '../components/nodes/task';\nimport Finish from '../components/nodes/finish';\n\nconst nodeTypes = {\n  start: Start,\n  task: Task,\n  finish: Finish,\n};\n\nconst nodeStyles = {\n  start: startStyle,\n  task: taskStyle,\n};\n\nconst initialElements = [\n  {\n    id: '1',\n    type: 'start',\n    data: {\n      title: 'Start',\n    },\n    position: { x: 50, y: 250 },\n  },\n  {\n    id: '2',\n    type: 'task',\n    data: {\n      title: 'Task 1',\n    },\n    position: { x: 450, y: 250 },\n  },\n  {\n    id: '3',\n    type: 'finish',\n    data: {\n      title: 'Finish 1',\n    },\n    position: { x: 825, y: 150 },\n  },\n  {\n    id: '4',\n    type: 'finish',\n    data: {\n      title: 'Finish 2',\n    },\n    position: { x: 825, y: 300 },\n  },\n];\n\nconst getElementType = (id) =>\n  initialElements.find((element) => element.id === id)?.type;\n\nfunction Test1() {\n  const [elements, setElements] = useState(initialElements);\n\n  const onConnect = (params) => {\n    const elementType = getElementType(params.source);\n    const style = nodeStyles[elementType];\n    const color = style?.[params.sourceHandle];\n\n    setElements((elements) =>\n      addEdge(\n        {\n          ...params,\n          // stroke edge style\n          style: { stroke: color },\n        },\n        elements.map((element) =>\n          element.id === params.target\n            ? // also style \"in\" handler of a target\n              { ...element, data: { ...element.data, style: { in: color } } }\n            : element\n        )\n      )\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <ReactFlow\n        {...{ nodeTypes, elements, onConnect }}\n        className=\"playground\"\n      />\n    </div>\n  );\n}\n\nexport default Test1;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst InteractiveTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-interactive-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default InteractiveTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst SyncTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-sync-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default SyncTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst AsyncTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-async-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default AsyncTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst Condition = memo(({ id, data }) => {\n  return (\n    <Base>\n      <div className=\"node-condition--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div>\n          {data.rules &&\n            data.rules.map((rule) => (\n              <div\n                key={`${id}=rule.id`}\n                className=\"node-handle--container node-handle--container--right\"\n              >\n                {id}\n                <Handle\n                  id={rule.id}\n                  type=\"source\"\n                  position=\"right\"\n                  isConnectable\n                />\n              </div>\n            ))}\n          <div className=\"node-handle--container node-handle--container--right\">\n            No\n            <Handle id=\"no\" type=\"source\" position=\"right\" isConnectable />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Condition;\n","import React, { useState } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nimport Start from '../components/nodes/start';\nimport InteractiveTask from '../components/nodes/interactive_task';\nimport SyncTask from '../components/nodes/sync_task';\nimport AsyncTask from '../components/nodes/async_task';\nimport Condition from '../components/nodes/condition';\nimport Finish from '../components/nodes/finish';\n\nimport tasksData from '../data/tasks.json';\nimport workflowData from '../data/workflow.json';\n\nconst nodeTypes = {\n  start: Start,\n  interactive_task: InteractiveTask,\n  sync_task: SyncTask,\n  async_task: AsyncTask,\n  condition: Condition,\n  finish: Finish,\n};\n\nconst getElementNodeType = (type) => {\n  switch (type) {\n    case 'INTERACTIVE':\n      return 'interactive_task';\n    case 'SYNC':\n      return 'sync_task';\n    case 'ASYNC':\n      return 'async_task';\n  }\n};\n\nconst getElementTitle = (task) => {\n  switch (task) {\n    case 'upload_document':\n      return 'Upload Document';\n    case 'upload_selfie':\n      return 'Upload Selfie';\n    case 'collect_address':\n      return 'Collect Address';\n    case 'ocr_autofill':\n      return 'OCR Autofill';\n    case 'aamva':\n      return 'AAMVA';\n    case 'facial_similarity_report':\n      return 'Facial Similarity Report';\n    case 'document_report':\n      return 'Document Report';\n    case 'watchlist_report':\n      return 'Watchlist Report';\n    case 'pass_applicant':\n      return 'Pass';\n    case 'consider_applicant':\n      return 'Fail';\n    default:\n      return 'N/A';\n  }\n};\n\nconst getElementObj = ({ id, type, task, rules, position }) => {\n  switch (type) {\n    case 'TASK': {\n      const taskDefinition = tasksData.tasks.find(({ name }) => name === task);\n      return {\n        id,\n        type: getElementNodeType(taskDefinition.type),\n        data: {\n          title: taskDefinition.settings?.title || getElementTitle(task),\n        },\n        position,\n      };\n    }\n    case 'CONDITION':\n      return {\n        id,\n        type: 'condition',\n        data: { rules },\n        position,\n      };\n    case 'FINAL':\n      return {\n        id,\n        type: 'finish',\n        data: {\n          title: getElementTitle(task),\n        },\n        position,\n      };\n  }\n};\n\nconst initialElements = [];\n\nworkflowData.workflow.nodes.forEach(\n  ({\n    id,\n    type,\n    task,\n    rules,\n    defaultNode,\n    nextNode,\n    visualSettings: { position },\n  }) => {\n    if (!initialElements.length) {\n      initialElements.push({\n        id: 0,\n        type: 'start',\n        data: {\n          title: 'Start',\n        },\n        position: { x: 25, y: 25 },\n      });\n      initialElements.push({\n        id: `0-${id}`,\n        source: 0,\n        target: id,\n      });\n    }\n\n    initialElements.push(getElementObj({ id, type, task, rules, position }));\n\n    if (defaultNode)\n      initialElements.push({\n        id: defaultNode.visualSettings.id,\n        source: id,\n        sourceHandle: 'no',\n        target: defaultNode.id,\n      });\n\n    if (nextNode)\n      nextNode.forEach((nextNode) => {\n        initialElements.push({\n          id: nextNode.visualSettings.id,\n          source: id,\n          target: nextNode.id,\n        });\n      });\n\n    if (rules)\n      rules.forEach((rule) => {\n        rule.nextNode.forEach((nextNode) => {\n          initialElements.push({\n            id: nextNode.visualSettings.id,\n            source: id,\n            sourceHandle: rule.id,\n            target: nextNode.id,\n          });\n        });\n      });\n  }\n);\n\nfunction Test2() {\n  const [elements] = useState(initialElements);\n\n  return (\n    <div className=\"wrapper\">\n      <h2>Workflow diagram</h2>\n      <ReactFlow\n        {...{ nodeTypes, elements }}\n        className=\"playground\"\n        style={{ height: '550px' }}\n      />\n      <h2>Current React Flow object of elements:</h2>\n      <pre>{JSON.stringify(elements, null, 2)}</pre>\n      <hr />\n      <h2>Raw workflow JSON data:</h2>\n      <pre>{JSON.stringify(workflowData, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default Test2;\n"],"sourceRoot":""}