{"version":3,"sources":["webpack://@josokinas/react-flow-playground/./src/components/nodes/interactive_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/sync_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/async_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/condition.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_2.jsx"],"names":["memo","data","title","className","id","type","position","isConnectable","style","backgroundColor","rules","map","rule","key","nodeTypes","start","Start","interactive_task","InteractiveTask","sync_task","SyncTask","async_task","AsyncTask","condition","Condition","finish","Finish","getElementNodeType","getElementTitle","task","initialElements","workflowData","defaultNode","nextNode","visualSettings","length","push","x","y","source","target","taskDefinition","tasksData","name","settings","getElementObj","sourceHandle","forEach","elements","useState","height","JSON","stringify"],"mappings":"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","file":"component---src-pages-test-2-jsx-dfc9cbf4ed3d958ebbaa.js","sourcesContent":["import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst InteractiveTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-interactive-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default InteractiveTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst SyncTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-sync-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default SyncTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst AsyncTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-async-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default AsyncTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst Condition = memo(({ id, data }) => {\n  return (\n    <Base>\n      <div className=\"node-condition--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div>\n          {data.rules &&\n            data.rules.map((rule) => (\n              <div\n                key={`${id}=rule.id`}\n                className=\"node-handle--container node-handle--container--right\"\n              >\n                {id}\n                <Handle\n                  id={rule.id}\n                  type=\"source\"\n                  position=\"right\"\n                  isConnectable\n                />\n              </div>\n            ))}\n          <div className=\"node-handle--container node-handle--container--right\">\n            No\n            <Handle id=\"no\" type=\"source\" position=\"right\" isConnectable />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Condition;\n","import React, { useState } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nimport Start from '../components/nodes/start';\nimport InteractiveTask from '../components/nodes/interactive_task';\nimport SyncTask from '../components/nodes/sync_task';\nimport AsyncTask from '../components/nodes/async_task';\nimport Condition from '../components/nodes/condition';\nimport Finish from '../components/nodes/finish';\n\nimport tasksData from '../data/tasks.json';\nimport workflowData from '../data/workflow.json';\n\nconst nodeTypes = {\n  start: Start,\n  interactive_task: InteractiveTask,\n  sync_task: SyncTask,\n  async_task: AsyncTask,\n  condition: Condition,\n  finish: Finish,\n};\n\nconst getElementNodeType = (type) => {\n  switch (type) {\n    case 'INTERACTIVE':\n      return 'interactive_task';\n    case 'SYNC':\n      return 'sync_task';\n    case 'ASYNC':\n      return 'async_task';\n  }\n};\n\nconst getElementTitle = (task) => {\n  switch (task) {\n    case 'upload_document':\n      return 'Upload Document';\n    case 'upload_selfie':\n      return 'Upload Selfie';\n    case 'collect_address':\n      return 'Collect Address';\n    case 'ocr_autofill':\n      return 'OCR Autofill';\n    case 'aamva':\n      return 'AAMVA';\n    case 'facial_similarity_report':\n      return 'Facial Similarity Report';\n    case 'document_report':\n      return 'Document Report';\n    case 'watchlist_report':\n      return 'Watchlist Report';\n    case 'pass_applicant':\n      return 'Pass';\n    case 'consider_applicant':\n      return 'Fail';\n    default:\n      return 'N/A';\n  }\n};\n\nconst getElementObj = ({ id, type, task, rules, position }) => {\n  switch (type) {\n    case 'TASK': {\n      const taskDefinition = tasksData.tasks.find(({ name }) => name === task);\n      return {\n        id,\n        type: getElementNodeType(taskDefinition.type),\n        data: {\n          title: taskDefinition.settings?.title || getElementTitle(task),\n        },\n        position,\n      };\n    }\n    case 'CONDITION':\n      return {\n        id,\n        type: 'condition',\n        data: { rules },\n        position,\n      };\n    case 'FINAL':\n      return {\n        id,\n        type: 'finish',\n        data: {\n          title: getElementTitle(task),\n        },\n        position,\n      };\n  }\n};\n\nconst initialElements = [];\n\nworkflowData.workflow.nodes.forEach(\n  ({\n    id,\n    type,\n    task,\n    rules,\n    defaultNode,\n    nextNode,\n    visualSettings: { position },\n  }) => {\n    if (!initialElements.length) {\n      initialElements.push({\n        id: 0,\n        type: 'start',\n        data: {\n          title: 'Start',\n        },\n        position: { x: 25, y: 25 },\n      });\n      initialElements.push({\n        id: `0-${id}`,\n        source: 0,\n        target: id,\n      });\n    }\n\n    initialElements.push(getElementObj({ id, type, task, rules, position }));\n\n    if (defaultNode)\n      initialElements.push({\n        id: defaultNode.visualSettings.id,\n        source: id,\n        sourceHandle: 'no',\n        target: defaultNode.id,\n      });\n\n    if (nextNode)\n      nextNode.forEach((nextNode) => {\n        initialElements.push({\n          id: nextNode.visualSettings.id,\n          source: id,\n          target: nextNode.id,\n        });\n      });\n\n    if (rules)\n      rules.forEach((rule) => {\n        rule.nextNode.forEach((nextNode) => {\n          initialElements.push({\n            id: nextNode.visualSettings.id,\n            source: id,\n            sourceHandle: rule.id,\n            target: nextNode.id,\n          });\n        });\n      });\n  }\n);\n\nfunction Test2() {\n  const [elements] = useState(initialElements);\n\n  return (\n    <div className=\"wrapper\">\n      <h2>Workflow diagram</h2>\n      <ReactFlow\n        {...{ nodeTypes, elements }}\n        className=\"playground\"\n        style={{ height: '550px' }}\n      />\n      <h2>Current React Flow object of elements:</h2>\n      <pre>{JSON.stringify(elements, null, 2)}</pre>\n      <hr />\n      <h2>Raw workflow JSON data:</h2>\n      <pre>{JSON.stringify(workflowData, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default Test2;\n"],"sourceRoot":""}