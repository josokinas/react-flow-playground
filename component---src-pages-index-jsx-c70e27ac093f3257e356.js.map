{"version":3,"sources":["webpack://@josokinas/react-flow-playground/./src/pages/index.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/task.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_1.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/action.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_2.jsx"],"names":["tests","test1","Test1","test2","Test2","TestComponent","useState","test","setTest","className","onClick","style","out_1","out_2","memo","id","data","title","type","position","isConnectable","backgroundColor","nodeTypes","start","Start","task","Task","finish","Finish","nodeStyles","startStyle","taskStyle","initialElements","x","y","elements","setElements","onConnect","params","elementType","source","find","element","handleId","sourceHandle","split","color","addEdge","stroke","map","target","in","action","Action","getElementTitle","workflowData","nextNode","visualSettings","length","push","forEach","height","JSON","stringify"],"mappings":"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","file":"component---src-pages-index-jsx-c70e27ac093f3257e356.js","sourcesContent":["import React, { useState } from 'react';\n\nimport Test1 from './test_1';\nimport Test2 from './test_2';\n\nconst tests = {\n  test1: Test1,\n  test2: Test2,\n};\n\nfunction Index() {\n  const [test, setTest] = useState(null);\n\n  const getTest = () => {\n    const TestComponent = tests[test];\n\n    if (TestComponent) return <TestComponent />;\n\n    return null;\n  };\n\n  return (\n    <div className=\"container\">\n      <button onClick={() => setTest('test1')}>Test 1</button>\n      <button onClick={() => setTest('test2')}>Test 2</button>\n      {getTest()}\n    </div>\n  );\n}\n\nexport default Index;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nexport const style = {\n  out_1: 'rgba(222, 180, 31)',\n  out_2: 'rgba(15, 34, 212)',\n};\n\nconst Task = memo(({ id, data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-task--body\">\n        <div>\n          <div className=\"node-handle--container node-handle--container--left\">\n            Input 1\n            <Handle\n              id={`${id}-in`}\n              type=\"target\"\n              position=\"left\"\n              isConnectable\n              style={{ backgroundColor: data.style?.['in'] }}\n            />\n          </div>\n        </div>\n        <div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 1\n            <Handle\n              id={`${id}-out_1`}\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_1 }}\n            />\n          </div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 2\n            <Handle\n              id={`${id}-out_2`}\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_2 }}\n            />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Task;\n","import React, { useState } from 'react';\nimport ReactFlow, { addEdge } from 'react-flow-renderer';\n\nimport Start, { style as startStyle } from '../components/nodes/start';\nimport Task, { style as taskStyle } from '../components/nodes/task';\nimport Finish from '../components/nodes/finish';\n\nconst nodeTypes = {\n  start: Start,\n  task: Task,\n  finish: Finish,\n};\n\nconst nodeStyles = {\n  start: startStyle,\n  task: taskStyle,\n};\n\nconst initialElements = [\n  {\n    id: '1',\n    type: 'start',\n    data: {\n      title: 'Start',\n    },\n    position: { x: 50, y: 250 },\n  },\n  {\n    id: '2',\n    type: 'task',\n    data: {\n      title: 'Task 1',\n    },\n    position: { x: 450, y: 250 },\n  },\n  {\n    id: '3',\n    type: 'finish',\n    data: {\n      title: 'Finish 1',\n    },\n    position: { x: 825, y: 150 },\n  },\n  {\n    id: '4',\n    type: 'finish',\n    data: {\n      title: 'Finish 2',\n    },\n    position: { x: 825, y: 300 },\n  },\n];\n\nconst getElementType = (id) =>\n  initialElements.find((element) => element.id === id)?.type;\n\nfunction Test1() {\n  const [elements, setElements] = useState(initialElements);\n\n  const onConnect = (params) => {\n    const elementType = getElementType(params.source);\n    const style = nodeStyles[elementType];\n    const [, handleId] = params.sourceHandle.split('-');\n    const color = style?.[handleId];\n\n    setElements((elements) =>\n      addEdge(\n        {\n          ...params,\n          // stroke edge style\n          style: { stroke: color },\n        },\n        elements.map((element) =>\n          element.id === params.target\n            ? // also style \"in\" handler of a target\n              { ...element, data: { ...element.data, style: { in: color } } }\n            : element\n        )\n      )\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <ReactFlow\n        {...{ nodeTypes, elements, onConnect }}\n        className=\"playground\"\n      />\n    </div>\n  );\n}\n\nexport default Test1;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst Action = memo(({ id, data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-task--body\">\n        <div>\n          <div className=\"node-handle--container node-handle--container--left\">\n            Input\n            <Handle\n              id={`${id}-in`}\n              type=\"target\"\n              position=\"left\"\n              isConnectable\n              style={{ backgroundColor: data.style?.['in'] }}\n            />\n          </div>\n        </div>\n        <div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output\n            <Handle\n              id={`${id}-out`}\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n            />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Action;\n","import React, { useState } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nimport Start from '../components/nodes/start';\nimport Action from '../components/nodes/action';\nimport Finish from '../components/nodes/finish';\n\nimport workflowData from '../data/workflow.json';\n\nconst nodeTypes = {\n  start: Start,\n  action: Action,\n  finish: Finish,\n};\n\nconst getElementTitle = (task) => {\n  switch (task) {\n    case 'upload_document':\n      return 'Upload Document';\n    case 'ocr_autofill':\n      return 'OCR Autofill';\n    default:\n      return 'N/A';\n  }\n};\n\nconst initialElements = [];\n\nworkflowData.workflow.nodes.forEach(\n  ({ id, task, nextNode, visualSettings: { position } }) => {\n    if (!initialElements.length) {\n      initialElements.push({\n        id: 0,\n        type: 'start',\n        data: {\n          title: 'Start',\n        },\n        position: { x: 25, y: 25 },\n      });\n      initialElements.push({\n        id: `0-${id}`,\n        source: 0,\n        target: id,\n      });\n    }\n\n    initialElements.push({\n      id,\n      type: 'action',\n      data: {\n        title: getElementTitle(task),\n      },\n      position,\n    });\n\n    if (nextNode)\n      nextNode.forEach((nextNode) => {\n        initialElements.push({\n          id: nextNode.visualSettings.id,\n          source: id,\n          target: nextNode.id,\n        });\n      });\n  }\n);\n\nfunction Test2() {\n  const [elements] = useState(initialElements);\n\n  return (\n    <div className=\"wrapper\">\n      <h2>Workflow diagram</h2>\n      <ReactFlow\n        {...{ nodeTypes, elements }}\n        className=\"playground\"\n        style={{ height: '550px' }}\n      />\n      <h2>Current React Flow object of elements:</h2>\n      <pre>{JSON.stringify(elements, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default Test2;\n"],"sourceRoot":""}