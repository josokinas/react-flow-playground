{"version":3,"sources":["webpack://@josokinas/react-flow-playground/./src/components/nodes/interactive_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/sync_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/async_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/condition.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_2.jsx"],"names":["memo","id","data","title","className","type","position","isConnectable","style","backgroundColor","nodeTypes","start","Start","interactive_task","InteractiveTask","sync_task","SyncTask","async_task","AsyncTask","condition","Condition","finish","Finish","getElementNodeType","getElementTitle","task","initialElements","workflowData","nextNode","visualSettings","length","push","x","y","source","target","taskDefinition","tasksData","name","settings","getElementObj","forEach","elements","useState","height","JSON","stringify"],"mappings":"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","file":"component---src-pages-test-2-jsx-9b4284b81e60f3dfef40.js","sourcesContent":["import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst InteractiveTask = memo(({ id, data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-interactive-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id={`${id}-in`}\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle\n            id={`${id}-out`}\n            type=\"source\"\n            position=\"right\"\n            isConnectable\n          />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default InteractiveTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst SyncTask = memo(({ id, data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-sync-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id={`${id}-in`}\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle\n            id={`${id}-out`}\n            type=\"source\"\n            position=\"right\"\n            isConnectable\n          />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default SyncTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst AsyncTask = memo(({ id, data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-async-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id={`${id}-in`}\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle\n            id={`${id}-out`}\n            type=\"source\"\n            position=\"right\"\n            isConnectable\n          />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default AsyncTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst Condition = memo(({ id, data }) => {\n  return (\n    <Base>\n      <div className=\"node-condition--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id={`${id}-in`}\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Yes\n            <Handle\n              id={`${id}-yes`}\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n            />\n          </div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            No\n            <Handle\n              id={`${id}-no`}\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n            />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Condition;\n","import React, { useState } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nimport Start from '../components/nodes/start';\nimport InteractiveTask from '../components/nodes/interactive_task';\nimport SyncTask from '../components/nodes/sync_task';\nimport AsyncTask from '../components/nodes/async_task';\nimport Condition from '../components/nodes/condition';\nimport Finish from '../components/nodes/finish';\n\nimport tasksData from '../data/tasks.json';\nimport workflowData from '../data/workflow.json';\n\nconst nodeTypes = {\n  start: Start,\n  interactive_task: InteractiveTask,\n  sync_task: SyncTask,\n  async_task: AsyncTask,\n  condition: Condition,\n  finish: Finish,\n};\n\nconst getElementNodeType = (type) => {\n  switch (type) {\n    case 'INTERACTIVE':\n      return 'interactive_task';\n    case 'SYNC':\n      return 'sync_task';\n    case 'ASYNC':\n      return 'async_task';\n  }\n};\n\nconst getElementTitle = (task) => {\n  switch (task) {\n    case 'upload_document':\n      return 'Upload Document';\n    case 'upload_selfie':\n      return 'Upload Selfie';\n    case 'collect_address':\n      return 'Collect Address';\n    case 'ocr_autofill':\n      return 'OCR Autofill';\n    case 'aamva':\n      return 'AAMVA';\n    case 'facial_similarity_report':\n      return 'Facial Similarity Report';\n    case 'document_report':\n      return 'Document Report';\n    case 'watchlist_report':\n      return 'Watchlist Report';\n    default:\n      return 'N/A';\n  }\n};\n\nconst getElementObj = ({ id, type, task, position }) => {\n  switch (type) {\n    case 'TASK': {\n      const taskDefinition = tasksData.tasks.find(({ name }) => name === task);\n      return {\n        id,\n        type: getElementNodeType(taskDefinition.type),\n        data: {\n          title: taskDefinition.settings?.title || getElementTitle(task),\n        },\n        position,\n      };\n    }\n    case 'CONDITION':\n      return {\n        id,\n        type: 'condition',\n        data: {},\n        position,\n      };\n  }\n};\n\nconst initialElements = [];\n\nworkflowData.workflow.nodes.forEach(\n  ({ id, type, task, nextNode, visualSettings: { position } }) => {\n    if (!initialElements.length) {\n      initialElements.push({\n        id: 0,\n        type: 'start',\n        data: {\n          title: 'Start',\n        },\n        position: { x: 25, y: 25 },\n      });\n      initialElements.push({\n        id: `0-${id}`,\n        source: 0,\n        target: id,\n      });\n    }\n\n    initialElements.push(getElementObj({ id, type, task, position }));\n\n    if (nextNode)\n      nextNode.forEach((nextNode) => {\n        initialElements.push({\n          id: nextNode.visualSettings.id,\n          source: id,\n          target: nextNode.id,\n        });\n      });\n  }\n);\n\nfunction Test2() {\n  const [elements] = useState(initialElements);\n\n  return (\n    <div className=\"wrapper\">\n      <h2>Workflow diagram</h2>\n      <ReactFlow\n        {...{ nodeTypes, elements }}\n        className=\"playground\"\n        style={{ height: '550px' }}\n      />\n      <h2>Current React Flow object of elements:</h2>\n      <pre>{JSON.stringify(elements, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default Test2;\n"],"sourceRoot":""}