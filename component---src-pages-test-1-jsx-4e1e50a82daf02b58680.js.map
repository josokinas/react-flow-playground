{"version":3,"sources":["webpack://@josokinas/react-flow-playground/./src/components/nodes/task.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_1.jsx"],"names":["style","out_1","out_2","memo","id","data","title","className","type","position","isConnectable","backgroundColor","nodeTypes","start","Start","task","Task","finish","Finish","nodeStyles","startStyle","taskStyle","initialElements","x","y","useState","elements","setElements","onConnect","params","elementType","source","find","element","handleId","sourceHandle","split","color","addEdge","stroke","map","target","in"],"mappings":"kPAIaA,EAAQ,CACnBC,MAAO,qBACPC,MAAO,qBA4CT,GAzCaC,WAAK,YAAmB,IAAD,EAAfC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACvB,OACE,gBAAC,IAAD,CAAMC,MAAOD,EAAKC,OAChB,uBAAKC,UAAU,mBACb,uBAAKA,UAAU,uDAAf,QAEE,gBAAC,KAAD,CACEH,GAAOA,EAAL,MACFI,KAAK,SACLC,SAAS,OACTC,eAAa,EACbV,MAAO,CAAEW,gBAAe,UAAEN,EAAKL,aAAP,aAAE,SAG9B,2BACE,uBAAKO,UAAU,wDAAf,WAEE,gBAAC,KAAD,CACEH,GAAOA,EAAL,SACFI,KAAK,SACLC,SAAS,QACTC,eAAa,EACbV,MAAO,CAAEW,gBAAiBX,EAAMC,UAGpC,uBAAKM,UAAU,wDAAf,WAEE,gBAAC,KAAD,CACEH,GAAOA,EAAL,SACFI,KAAK,SACLC,SAAS,QACTC,eAAa,EACbV,MAAO,CAAEW,gBAAiBX,EAAME,gB,UClCxCU,EAAY,CAChBC,MAAOC,IACPC,KAAMC,EACNC,OAAQC,KAGJC,EAAa,CACjBN,MAAOO,IACPL,KAAMM,GAGFC,EAAkB,CACtB,CACElB,GAAI,IACJI,KAAM,QACNH,KAAM,CACJC,MAAO,SAETG,SAAU,CAAEc,EAAG,GAAIC,EAAG,MAExB,CACEpB,GAAI,IACJI,KAAM,OACNH,KAAM,CACJC,MAAO,UAETG,SAAU,CAAEc,EAAG,IAAKC,EAAG,MAEzB,CACEpB,GAAI,IACJI,KAAM,SACNH,KAAM,CACJC,MAAO,YAETG,SAAU,CAAEc,EAAG,IAAKC,EAAG,MAEzB,CACEpB,GAAI,IACJI,KAAM,SACNH,KAAM,CACJC,MAAO,YAETG,SAAU,CAAEc,EAAG,IAAKC,EAAG,OA2C3B,MApCA,WACE,OAAgCC,cAASH,GAAlCI,EAAP,KAAiBC,EAAjB,KAyBA,OACE,uBAAKpB,UAAU,WACb,gBAAC,KAAD,CACQK,YAAWc,WAAUE,UA1Bf,SAACC,GACjB,IAPoBzB,EAAD,EAOb0B,GAPc1B,EAOeyB,EAAOE,OAPvB,UACrBT,EAAgBU,MAAK,SAACC,GAAD,OAAaA,EAAQ7B,KAAOA,YAD5B,aACrB,EAAsDI,MAO9CR,EAAQmB,EAAWW,GAChBI,EAAYL,EAAOM,aAAaC,MAAM,KAA/C,GACMC,EAAQrC,aAAH,EAAGA,EAAQkC,GAEtBP,GAAY,SAACD,GAAD,OACVY,QAAQ,OAAD,UAEAT,EAFA,CAIH7B,MAAO,CAAEuC,OAAQF,KAEnBX,EAASc,KAAI,SAACP,GAAD,OACXA,EAAQ7B,KAAOyB,EAAOY,OAAtB,iBAESR,EAFT,CAEkB5B,KAAK,OAAD,UAAO4B,EAAQ5B,KAAf,CAAqBL,MAAO,CAAE0C,GAAIL,OACpDJ,UAUN1B,UAAU","file":"component---src-pages-test-1-jsx-4e1e50a82daf02b58680.js","sourcesContent":["import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nexport const style = {\n  out_1: 'rgba(222, 180, 31)',\n  out_2: 'rgba(15, 34, 212)',\n};\n\nconst Task = memo(({ id, data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id={`${id}-in`}\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 1\n            <Handle\n              id={`${id}-out_1`}\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_1 }}\n            />\n          </div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 2\n            <Handle\n              id={`${id}-out_2`}\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_2 }}\n            />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Task;\n","import React, { useState } from 'react';\nimport ReactFlow, { addEdge } from 'react-flow-renderer';\n\nimport Start, { style as startStyle } from '../components/nodes/start';\nimport Task, { style as taskStyle } from '../components/nodes/task';\nimport Finish from '../components/nodes/finish';\n\nconst nodeTypes = {\n  start: Start,\n  task: Task,\n  finish: Finish,\n};\n\nconst nodeStyles = {\n  start: startStyle,\n  task: taskStyle,\n};\n\nconst initialElements = [\n  {\n    id: '1',\n    type: 'start',\n    data: {\n      title: 'Start',\n    },\n    position: { x: 50, y: 250 },\n  },\n  {\n    id: '2',\n    type: 'task',\n    data: {\n      title: 'Task 1',\n    },\n    position: { x: 450, y: 250 },\n  },\n  {\n    id: '3',\n    type: 'finish',\n    data: {\n      title: 'Finish 1',\n    },\n    position: { x: 825, y: 150 },\n  },\n  {\n    id: '4',\n    type: 'finish',\n    data: {\n      title: 'Finish 2',\n    },\n    position: { x: 825, y: 300 },\n  },\n];\n\nconst getElementType = (id) =>\n  initialElements.find((element) => element.id === id)?.type;\n\nfunction Test1() {\n  const [elements, setElements] = useState(initialElements);\n\n  const onConnect = (params) => {\n    const elementType = getElementType(params.source);\n    const style = nodeStyles[elementType];\n    const [, handleId] = params.sourceHandle.split('-');\n    const color = style?.[handleId];\n\n    setElements((elements) =>\n      addEdge(\n        {\n          ...params,\n          // stroke edge style\n          style: { stroke: color },\n        },\n        elements.map((element) =>\n          element.id === params.target\n            ? // also style \"in\" handler of a target\n              { ...element, data: { ...element.data, style: { in: color } } }\n            : element\n        )\n      )\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <ReactFlow\n        {...{ nodeTypes, elements, onConnect }}\n        className=\"playground\"\n      />\n    </div>\n  );\n}\n\nexport default Test1;\n"],"sourceRoot":""}