{"version":3,"sources":["webpack://@josokinas/react-flow-playground/./src/components/nodes/async_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/condition.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/interactive_task.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/sync_task.jsx","webpack://@josokinas/react-flow-playground/./src/pages/index.jsx","webpack://@josokinas/react-flow-playground/./src/components/nodes/task.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_1.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_2.jsx","webpack://@josokinas/react-flow-playground/./src/pages/test_3.jsx"],"names":["AsyncTask","memo","data","title","className","id","type","position","isConnectable","style","backgroundColor","parseOperands","operation","operands","map","value","join","Expression","Condition","rules","rule","key","expression","InteractiveTask","SyncTask","tests","test1","Test1","test2","Test2","test3","Test3","TestComponent","useState","test","setTest","onClick","out_1","out_2","nodeTypes","start","Start","task","Task","finish","Finish","nodeStyles","startStyle","taskStyle","initialElements","x","y","elements","setElements","onConnect","params","elementType","source","find","element","color","sourceHandle","addEdge","stroke","target","in","interactive_task","sync_task","async_task","condition","getElementNodeType","getElementTitle","workflowData","defaultNode","nextNode","visualSettings","length","push","taskDefinition","tasksData","name","settings","getElementObj","forEach","height","JSON","stringify"],"mappings":"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","file":"component---src-pages-index-jsx-7d2037cc3d4deccc9d33.js","sourcesContent":["import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst AsyncTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-async-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default AsyncTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst parseOperands = (operation, operands) =>\n  operands\n    .map(({ operation, operands, value }) => {\n      if (operands) return `(${parseOperands(operation, operands)})`;\n\n      return value;\n    })\n    .join(` ${operation} `);\n\nconst Expression = memo(({ operation, operands }) => {\n  return (\n    <div className=\"node-condition-expression--container\">\n      {parseOperands(operation, operands)}\n    </div>\n  );\n});\n\nconst Condition = memo(({ id, data }) => {\n  return (\n    <Base>\n      <div className=\"node-condition--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div>\n          {data.rules &&\n            data.rules.map((rule) => (\n              <div\n                key={`${id}=rule.id`}\n                className=\"node-handle--container node-handle--container--right\"\n              >\n                <Expression\n                  operation={rule.expression.operation}\n                  operands={rule.expression.operands}\n                />\n                <Handle\n                  id={rule.id}\n                  type=\"source\"\n                  position=\"right\"\n                  isConnectable\n                />\n              </div>\n            ))}\n          <div className=\"node-handle--container node-handle--container--right\">\n            No\n            <Handle id=\"no\" type=\"source\" position=\"right\" isConnectable />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Condition;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst InteractiveTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-interactive-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default InteractiveTask;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nconst SyncTask = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-sync-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div className=\"node-handle--container node-handle--container--right\">\n          Output\n          <Handle id=\"out\" type=\"source\" position=\"right\" isConnectable />\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default SyncTask;\n","import React, { useState } from 'react';\n\nimport Test1 from './test_1';\nimport Test2 from './test_2';\nimport Test3 from './test_3';\n\nconst tests = {\n  test1: Test1,\n  test2: Test2,\n  test3: Test3,\n};\n\nfunction Index() {\n  const [test, setTest] = useState(null);\n\n  const getTest = () => {\n    const TestComponent = tests[test];\n\n    if (TestComponent) return <TestComponent />;\n\n    return null;\n  };\n\n  return (\n    <div className=\"container\">\n      <button onClick={() => setTest('test1')}>Test 1</button>\n      <button onClick={() => setTest('test2')}>Test 2</button>\n      <button onClick={() => setTest('test3')}>Test 3</button>\n      {getTest()}\n    </div>\n  );\n}\n\nexport default Index;\n","import React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport Base from './base';\n\nexport const style = {\n  out_1: 'rgba(222, 180, 31)',\n  out_2: 'rgba(15, 34, 212)',\n};\n\nconst Task = memo(({ data }) => {\n  return (\n    <Base title={data.title}>\n      <div className=\"node-task--body\">\n        <div className=\"node-handle--container node-handle--container--left\">\n          Input\n          <Handle\n            id=\"in\"\n            type=\"target\"\n            position=\"left\"\n            isConnectable\n            style={{ backgroundColor: data.style?.['in'] }}\n          />\n        </div>\n        <div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 1\n            <Handle\n              id=\"out_1\"\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_1 }}\n            />\n          </div>\n          <div className=\"node-handle--container node-handle--container--right\">\n            Output 2\n            <Handle\n              id=\"out_2\"\n              type=\"source\"\n              position=\"right\"\n              isConnectable\n              style={{ backgroundColor: style.out_2 }}\n            />\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n});\n\nexport default Task;\n","import React, { useState } from 'react';\nimport ReactFlow, { addEdge } from 'react-flow-renderer';\n\nimport Start, { style as startStyle } from '../components/nodes/start';\nimport Task, { style as taskStyle } from '../components/nodes/task';\nimport Finish from '../components/nodes/finish';\n\nconst nodeTypes = {\n  start: Start,\n  task: Task,\n  finish: Finish,\n};\n\nconst nodeStyles = {\n  start: startStyle,\n  task: taskStyle,\n};\n\nconst initialElements = [\n  {\n    id: '1',\n    type: 'start',\n    data: {\n      title: 'Start',\n    },\n    position: { x: 50, y: 250 },\n  },\n  {\n    id: '2',\n    type: 'task',\n    data: {\n      title: 'Task 1',\n    },\n    position: { x: 450, y: 250 },\n  },\n  {\n    id: '3',\n    type: 'finish',\n    data: {\n      title: 'Finish 1',\n    },\n    position: { x: 825, y: 150 },\n  },\n  {\n    id: '4',\n    type: 'finish',\n    data: {\n      title: 'Finish 2',\n    },\n    position: { x: 825, y: 300 },\n  },\n];\n\nconst getElementType = (id) =>\n  initialElements.find((element) => element.id === id)?.type;\n\nfunction Test1() {\n  const [elements, setElements] = useState(initialElements);\n\n  const onConnect = (params) => {\n    const elementType = getElementType(params.source);\n    const style = nodeStyles[elementType];\n    const color = style?.[params.sourceHandle];\n\n    setElements((elements) =>\n      addEdge(\n        {\n          ...params,\n          // stroke edge style\n          style: { stroke: color },\n        },\n        elements.map((element) =>\n          element.id === params.target\n            ? // also style \"in\" handler of a target\n              { ...element, data: { ...element.data, style: { in: color } } }\n            : element\n        )\n      )\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <ReactFlow\n        {...{ nodeTypes, elements, onConnect }}\n        className=\"playground\"\n      />\n    </div>\n  );\n}\n\nexport default Test1;\n","import React, { useState } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nimport Start from '../components/nodes/start';\nimport InteractiveTask from '../components/nodes/interactive_task';\nimport SyncTask from '../components/nodes/sync_task';\nimport AsyncTask from '../components/nodes/async_task';\nimport Condition from '../components/nodes/condition';\nimport Finish from '../components/nodes/finish';\n\nimport tasksData from '../data/tasks.json';\nimport workflowData from '../data/workflow_1.json';\n\nconst nodeTypes = {\n  start: Start,\n  interactive_task: InteractiveTask,\n  sync_task: SyncTask,\n  async_task: AsyncTask,\n  condition: Condition,\n  finish: Finish,\n};\n\nconst getElementNodeType = (type) => {\n  switch (type) {\n    case 'INTERACTIVE':\n      return 'interactive_task';\n    case 'SYNC':\n      return 'sync_task';\n    case 'ASYNC':\n      return 'async_task';\n  }\n};\n\nconst getElementTitle = (task) => {\n  switch (task) {\n    case 'upload_document':\n      return 'Upload Document';\n    case 'upload_selfie':\n      return 'Upload Selfie';\n    case 'collect_address':\n      return 'Collect Address';\n    case 'ocr_autofill':\n      return 'OCR Autofill';\n    case 'aamva':\n      return 'AAMVA';\n    case 'facial_similarity_report':\n      return 'Facial Similarity Report';\n    case 'document_report':\n      return 'Document Report';\n    case 'watchlist_report':\n      return 'Watchlist Report';\n    case 'pass_applicant':\n      return 'Pass';\n    case 'consider_applicant':\n      return 'Fail';\n    default:\n      return 'N/A';\n  }\n};\n\nconst getElementObj = ({ id, type, task, rules, position }) => {\n  switch (type) {\n    case 'TASK': {\n      const taskDefinition = tasksData.tasks.find(({ name }) => name === task);\n      return {\n        id,\n        type: getElementNodeType(taskDefinition.type),\n        data: {\n          title: taskDefinition.settings?.title || getElementTitle(task),\n        },\n        position,\n      };\n    }\n    case 'CONDITION':\n      return {\n        id,\n        type: 'condition',\n        data: { rules },\n        position,\n      };\n    case 'FINAL':\n      return {\n        id,\n        type: 'finish',\n        data: {\n          title: getElementTitle(task),\n        },\n        position,\n      };\n  }\n};\n\nconst initialElements = [];\n\nworkflowData.workflow.nodes.forEach(\n  ({\n    id,\n    type,\n    task,\n    rules,\n    defaultNode,\n    nextNode,\n    visualSettings: { position },\n  }) => {\n    if (!initialElements.length) {\n      initialElements.push({\n        id: 0,\n        type: 'start',\n        data: {\n          title: 'Start',\n        },\n        position: { x: 25, y: 25 },\n      });\n      initialElements.push({\n        id: `0-${id}`,\n        source: 0,\n        target: id,\n      });\n    }\n\n    initialElements.push(getElementObj({ id, type, task, rules, position }));\n\n    if (defaultNode)\n      initialElements.push({\n        id: defaultNode.visualSettings.id,\n        source: id,\n        sourceHandle: 'no',\n        target: defaultNode.id,\n      });\n\n    if (nextNode)\n      nextNode.forEach((nextNode) => {\n        initialElements.push({\n          id: nextNode.visualSettings.id,\n          source: id,\n          target: nextNode.id,\n        });\n      });\n\n    if (rules)\n      rules.forEach((rule) => {\n        rule.nextNode.forEach((nextNode) => {\n          initialElements.push({\n            id: nextNode.visualSettings.id,\n            source: id,\n            sourceHandle: rule.id,\n            target: nextNode.id,\n          });\n        });\n      });\n  }\n);\n\nfunction Test2() {\n  const [elements] = useState(initialElements);\n\n  return (\n    <div className=\"wrapper\">\n      <h2>Workflow diagram</h2>\n      <ReactFlow\n        {...{ nodeTypes, elements }}\n        className=\"playground\"\n        style={{ height: '550px' }}\n      />\n      <h2>Current React Flow object of elements:</h2>\n      <pre>{JSON.stringify(elements, null, 2)}</pre>\n      <hr />\n      <h2>Raw workflow JSON data:</h2>\n      <pre>{JSON.stringify(workflowData, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default Test2;\n","import React, { useState } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nimport Start from '../components/nodes/start';\nimport InteractiveTask from '../components/nodes/interactive_task';\nimport SyncTask from '../components/nodes/sync_task';\nimport AsyncTask from '../components/nodes/async_task';\nimport Condition from '../components/nodes/condition';\nimport Finish from '../components/nodes/finish';\n\nimport tasksData from '../data/tasks.json';\nimport workflowData from '../data/workflow_2.json';\n\nconst nodeTypes = {\n  start: Start,\n  interactive_task: InteractiveTask,\n  sync_task: SyncTask,\n  async_task: AsyncTask,\n  condition: Condition,\n  finish: Finish,\n};\n\nconst getElementNodeType = (type) => {\n  switch (type) {\n    case 'INTERACTIVE':\n      return 'interactive_task';\n    case 'SYNC':\n      return 'sync_task';\n    case 'ASYNC':\n      return 'async_task';\n  }\n};\n\nconst getElementTitle = (task) => {\n  switch (task) {\n    case 'upload_document':\n      return 'Upload Document';\n    case 'upload_selfie':\n      return 'Upload Selfie';\n    case 'collect_address':\n      return 'Collect Address';\n    case 'ocr_autofill':\n      return 'OCR Autofill';\n    case 'aamva':\n      return 'AAMVA';\n    case 'facial_similarity_report':\n      return 'Facial Similarity Report';\n    case 'document_report':\n      return 'Document Report';\n    case 'watchlist_report':\n      return 'Watchlist Report';\n    case 'pass_applicant':\n      return 'Pass';\n    case 'consider_applicant':\n      return 'Fail';\n    default:\n      return 'N/A';\n  }\n};\n\nconst getElementObj = ({ id, type, task, rules, position }) => {\n  switch (type) {\n    case 'TASK': {\n      const taskDefinition = tasksData.tasks.find(({ name }) => name === task);\n      return {\n        id,\n        type: getElementNodeType(taskDefinition.type),\n        data: {\n          title: taskDefinition.settings?.title || getElementTitle(task),\n        },\n        position,\n      };\n    }\n    case 'CONDITION':\n      return {\n        id,\n        type: 'condition',\n        data: { rules },\n        position,\n      };\n    case 'FINAL':\n      return {\n        id,\n        type: 'finish',\n        data: {\n          title: getElementTitle(task),\n        },\n        position,\n      };\n  }\n};\n\nconst initialElements = [];\n\nworkflowData.workflow.nodes.forEach(\n  ({\n    id,\n    type,\n    task,\n    rules,\n    defaultNode,\n    nextNode,\n    visualSettings: { position },\n  }) => {\n    if (!initialElements.length) {\n      initialElements.push({\n        id: 0,\n        type: 'start',\n        data: {\n          title: 'Start',\n        },\n        position: { x: 25, y: 25 },\n      });\n      initialElements.push({\n        id: `0-${id}`,\n        source: 0,\n        target: id,\n      });\n    }\n\n    initialElements.push(getElementObj({ id, type, task, rules, position }));\n\n    if (defaultNode)\n      initialElements.push({\n        id: defaultNode.visualSettings.id,\n        source: id,\n        sourceHandle: 'no',\n        target: defaultNode.id,\n      });\n\n    if (nextNode)\n      nextNode.forEach((nextNode) => {\n        initialElements.push({\n          id: nextNode.visualSettings.id,\n          source: id,\n          target: nextNode.id,\n        });\n      });\n\n    if (rules)\n      rules.forEach((rule) => {\n        rule.nextNode.forEach((nextNode) => {\n          initialElements.push({\n            id: nextNode.visualSettings.id,\n            source: id,\n            sourceHandle: rule.id,\n            target: nextNode.id,\n          });\n        });\n      });\n  }\n);\n\nfunction Test3() {\n  const [elements] = useState(initialElements);\n\n  return (\n    <div className=\"wrapper\">\n      <ReactFlow {...{ nodeTypes, elements }} className=\"playground\" />\n    </div>\n  );\n}\n\nexport default Test3;\n"],"sourceRoot":""}